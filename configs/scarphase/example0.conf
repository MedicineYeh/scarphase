################################################################################
# General                                                                      #
################################################################################

# The sample period, i.e., how often to sample a branch
sample_period = 25000

# The interval period, i.e., the size of an interval in instructions

# 100M
window_size = 100000000

################################################################################
# Dynamic Sample Rate                                                          #
################################################################################
[dsr]

# Enable/Disable dynamic sample rate
enabled = 0  # Disable
# enabled = 1    # Enable

# The upper limit of the sample period
maximum_sample_period =  8

# The similarity threshold when in DSR mode
similarity_threshold = 0.5

###############################################################################
# Classifier                                                                  #
###############################################################################
[classifier]

# The type of flassifier
type = leader_follower

[classifier.leader_follower]

# Implementation type of leader follower classification
# type = bounded      # Faster. Multiple Phase ids for the same phase
type = unbounded      # Slower. One phase id per phase.

# The similarity threshold, i.e., If the distance (Manhattan Distance)
# between two vectors are below the threshold, they are clusterd into the same
# phase
similarity_threshold = 0.2
#similarity_threshold = 0.1

# The transition threshold
transition_threshold =  0

###############################################################################
# Predictor                                                                   #
###############################################################################
[predictor]

# The type of predictor
# type = last_value     # next interval is the same as previous interval
type = run_length       # use a pattern to predict the next interval

[predictor.run_length]

# Number of patterns
cache_size           = 256

# The length of the pattern
pattern_length       =   2

# If the confidence is below the threshold, last value is used
confidence_threshold =   1

###############################################################################
# Perfevent                                                                   #
###############################################################################
[perfevents]

[perfevents.sample]

# PERF_TYPE_HARDWARE:
# PERF_COUNT_HW_CPU_CYCLES              = 0,
# PERF_COUNT_HW_INSTRUCTIONS            = 1,
# PERF_COUNT_HW_CACHE_REFERENCES        = 2,
# PERF_COUNT_HW_CACHE_MISSES            = 3,
# PERF_COUNT_HW_BRANCH_INSTRUCTIONS     = 4,
# PERF_COUNT_HW_BRANCH_MISSES           = 5,
# PERF_COUNT_HW_BUS_CYCLES              = 6,

#counter    = 0x1      # PERF_COUNT_HW_INSTRUCTIONS
counter    = 0x04C4   # Branch counter (intel)
#counter    = 0x01C4     # Conditional branches counter (intel)

# PERF_TYPE_HARDWARE                    = 0,
# PERF_TYPE_SOFTWARE                    = 1,
# PERF_TYPE_TRACEPOINT                  = 2,
# PERF_TYPE_HW_CACHE                    = 3,
# PERF_TYPE_RAW                         = 4,
# PERF_TYPE_BREAKPOINT                  = 5,

#type_id    = 0        # PERF_TYPE_HARDWARE
type_id    = 4          # PERF_TYPE_RAW

# 0 - SAMPLE_IP can have arbitrary skid
# 1 - SAMPLE_IP must have constant skid
# 2 - SAMPLE_IP requested to have 0 skid
# 3 - SAMPLE_IP must have 0 skid

#precise_ip = 0    # Disable Intel PEBS
precise_ip = 1      # Enable Intel PEBS

# Number of pages to allocate
# Use sysctl -w kernel.perf_event_mlock_kb to increase the maximum size
kernal_buffer_size = 64

[perfevents.window]

# Counter to divide the execution into intervals
counter    = 0x1    # PERF_COUNT_HW_INSTRUCTIONS

#
type_id    = 0      # PERF_TYPE_HARDWARE

